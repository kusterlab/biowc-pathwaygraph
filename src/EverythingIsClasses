class PathwayMetadata {
  @property({ attribute: false })
  identifier!: string; // TODO: Refactor from 'id' - set if it is not set by user

  @property({ attribute: false })
  org!: string;

  @property({ attribute: false })
  pathwaytitle!: string; // TODO: Refactor from 'title'

}

abstract class PathwayGraphNode {

  @property({ attribute: false })
  nodeId?: string // TODO: Refactor from 'id'

  @property({ attribute: false })
  type!: string // TODO: Enumerate all possible types

  @property({ attribute: false })
  x?: number // Maybe exclamation mark is better here, check what it is used for

  @property({ attribute: false })
  y?: number
}


class GeneProteinNode extends PathwayGraphNode {
  @property({ attribute: false })
  geneNames!: string[]

  @property({ attribute: false })
  label!: string

  @property({ attribute: false })
  groupId?: string

  @property({ attribute: false })
  regulation?: string // TODO: One of 'up', 'down', '-'

  @property({ attribute: false })
  details?: { [key: string]: string | number } // TODO: Put things like logEC50 in here


  constructor() {
    super();
  }
}

class GroupNode extends PathwayGraphNode {
  @property({ attribute: false })
  components!: string[]

}

// TODO: Distinguish PTMNode and PTMInput.
class PTMNode extends PathwayGraphNode {
  @property({ attribute: false })
  proteinNodeId!: string // TODO: Refactor from proteinId

  details?: { [key: string]: string | number } // TODO: Put things like modifiedSequence &  logEC50 in here

  regulation!: string // TODO: One of 'up', 'down', '-'

}


// TODO: Should not be input, only created internally
class PTMSummaryNode extends PathwayGraphNode {
  @property({ attribute: false })
  proteinNodeId!: string // TODO: Refactor from proteinId

  @property({ attribute: false })
  label!: string

  @property({ attribute: false })
  ptmIds!: string[]

  @property({ attribute: false })
  regulation!: string // TODO: One of 'up', 'down', '-'

}

class PathwayGraphLink {
  @property({ attribute: false })
  linkId!: string // TODO: Refactor from 'id'

  @property({ attribute: false })
  sourceId!: string

  @property({ attribute: false })
  targetId!: string

  @property({ attribute: false })
  types!: string[] // TODO: Enumerate all link types


  @property({ attribute: false })
  sourceNode!: PathwayGraphNode

  @property({ attribute: false })
  targetNode!: PathwayGraphNode

}
